#!/usr/bin/python
#
#
from __future__ import print_function
import sys
import os

g_cmakejuce_folder = 'Builds/CMakeJuce'

def usage(): 
    print ('usage:')
    print ('from your root project folder:')
    print (' create_cmake_juce [<project_name>]')
    print ('if no project name is specified then if a single .jucer file')
    print ('is present in the current folder then the name of the jucer')
    print ('file will be used.')
    sys.exit(1)

def create_cmake_folder():
    try:
        os.mkdir(g_cmakejuce_folder)
    except:
        print ('Could not create folder. Perhaps builds folder not found.')
        print ('Are we in a jucer project folder structure?')
        usage()

    f = open(g_cmakejuce_folder + '/juce.cmake', 'w')
    
    print ("""
cmake_minimum_required(VERSION 2.8)

# TODO: Document and split off to submodule

# Set the output destination
set(plugin_BUILDS_DIR ${PROJECT_SOURCE_DIR}/Builds)

# TODO: Add support for Windows
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  set(plugin_BUILD_DIR ${plugin_BUILDS_DIR}/MacOSX)
  set(plugin_OUTPUT ${plugin_BUILDS_DIR}/build/${CMAKE_PROJECT_NAME}.vst)
  set(plugin_BUILDER xcodebuild)
  set(CMAKE_SKIP_BUILD_RPATH TRUE)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  set(plugin_BUILD_DIR ${plugin_BUILDS_DIR}/Linux)
  set(plugin_OUTPUT ${plugin_BUILDS_DIR}/build/${CMAKE_PROJECT_NAME}.so)
  set(plugin_BUILDER make -j8)
endif()

# Create a custom target that will build the generated project from Introjucer
set(main_TARGET ${CMAKE_PROJECT_NAME})
add_custom_target(${main_TARGET} ALL
                  COMMAND ${plugin_BUILDER}
                  WORKING_DIRECTORY
                  ${plugin_BUILD_DIR}
                  COMMENT "Running external builder")

# Paths to plugin source & Juce sources
set(plugin_SOURCE_DIR ${PROJECT_SOURCE_DIR}/Source)
set(juce_SOURCE_DIR ${PROJECT_SOURCE_DIR}/JuceLibraryCode)

# Glob all C++ sources and headers. Normally globs are not recommended
# practice in CMake, however there's no easy way to maintain the list
# of sources.
file(GLOB_RECURSE plugin_SOURCES
    RELATIVE
    ${CMAKE_CURRENT_SOURCE_DIR}
    "${plugin_SOURCE_DIR}/*.cpp"
)

file(GLOB_RECURSE plugin_HEADERS
    RELATIVE
    ${CMAKE_CURRENT_SOURCE_DIR}
    "${plugin_SOURCE_DIR}/*.h"
)

# Also glob the Juce sources so they are visible in the IDE and we get
# help with auto-completion etc.
file(GLOB_RECURSE juce_SOURCES
     RELATIVE
     ${CMAKE_CURRENT_SOURCE_DIR}
     "${juce_SOURCE_DIR}/*.cpp"
     "${juce_SOURCE_DIR}/*.h"
     "${juce_SOURCE_DIR}/*.mm"
)

set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

# Help some IDEs with #include completion
include_directories(${juce_SOURCE_DIR})

# Create a fake shared library so that the IDE project will associate the
# project sources with a target. This target will usually not compile since
# Introducer is doing some special things in the generated project, like
# setting compiler flags or not building certain files on a given platform.
#
# Rather than attempt to copy all of those things to these target, you should
# just use the build_PROJECT target in your IDE instead of virtual_TARGET.
set(virtual_TARGET virtual_${CMAKE_PROJECT_NAME})

add_library(virtual_TARGET SHARED
            ${plugin_SOURCES}
            ${plugin_HEADERS}
            ${juce_SOURCES}
)

set_target_properties(virtual_TARGET PROPERTIES PREFIX "")

set_property(TARGET virtual_TARGET
             APPEND
             PROPERTY
             IMPORTED_CONFIGURATIONS
             NOCONFIG)

set_target_properties(virtual_TARGET
                      PROPERTIES
                      IMPORTED_LOCATION_NOCONFIG
                      "${plugin_OUTPUT}")

# Allow the main target to build with the external build target
add_dependencies(virtual_TARGET ${main_TARGET})
""", file=f)
    f.close()
    return 

def get_name_of_single_jucer():
    result = None
    files_in_current_dir = os.listdir('.')
    for f in files_in_current_dir:
        if f.endswith('.jucer'):
            if result is None:
                result = f
            else:
                print ('multiple jucer files found')
                usage()

    return result 


def get_project_name(): 
    if len(sys.argv) > 1:
        possible_name = sys.argv[1]
    else: 
        possible_name = get_name_of_single_jucer()

    if possible_name is None:
        print ('error: no project name found')
        usage()

    return possible_name



def create_root_file(project_name):
    f = open('CMakeLists.txt', 'w')
    print ('cmake_minimum_required(VERSION 2.8)', file=f)
    print ('project(' + project_name + ')', file=f)

    print ('if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")', file=f)
    print ('  add_subdirectory(Builds/MacOSX)', file=f)
    print ('elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")', file=f)
    print ('  add_subdirectory(Builds/Linux)', file=f)
    print ('endif()', file=f)
    f.close()
    pass


def create_per_project_file(build_folder_name):
    original_folder = os.getcwd()

    try: 
        os.chdir('Builds/MacOSX')
    except OSError:
        print ("failed to find", build_folder_name, "build folder")
        os.chdir(original_folder)
        return

    f = open('CMakeLists.txt', 'w')
    print ('cmake_minimum_required(VERSION 2.8)', file=f)
    print ('include (../CMakeJuce/juce.cmake)', file=f)
    f.close()
    return


# main...
proj_name = get_project_name()
print ("creating for project", proj_name)

create_root_file(proj_name)
create_cmake_folder()
create_per_project_file('MacOSX')
create_per_project_file('Linux')

